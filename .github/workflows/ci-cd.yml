name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer

jobs:
  test:
    name: Test
    runs-on: macos-13
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Show Xcode Version
      run: xcodebuild -version
      
    - name: Show Available Simulators
      run: xcrun simctl list devicetypes
      
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: swiftlint --strict
      
    - name: Build and Test
      run: |
        xcodebuild clean test \
          -scheme DailyRoutineApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults.xcresult
        
    - name: Generate Code Coverage Report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.json
        fail_ci_if_error: true

  ui-test:
    name: UI Tests
    runs-on: macos-13
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Build for Testing
      run: |
        xcodebuild build-for-testing \
          -scheme DailyRoutineApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath DerivedData \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Run UI Tests
      run: |
        xcodebuild test-without-building \
          -scheme DailyRoutineApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -derivedDataPath DerivedData \
          -only-testing:DailyRoutineAppUITests \
          -resultBundlePath UITestResults
          
    - name: Upload UI Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-results
        path: UITestResults.xcresult

  security-scan:
    name: Security Scan
    runs-on: macos-13
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run Security Audit
      run: |
        # Check for common security issues
        grep -r "NSAllowsArbitraryLoads" . || true
        grep -r "NSExceptionDomains" . || true
        grep -r "http://" . --exclude-dir=.git || true
        
    - name: Check for Hardcoded Secrets
      run: |
        # Basic secret detection
        grep -r "password\s*=" . --exclude-dir=.git || true
        grep -r "api_key\s*=" . --exclude-dir=.git || true
        grep -r "secret\s*=" . --exclude-dir=.git || true

  build:
    name: Build for Distribution
    runs-on: macos-13
    needs: [test, ui-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
        
    - name: Download Provisioning Profiles
      uses: Apple-Actions/download-provisioning-profiles@v2
      with:
        bundle-id: com.yourcompany.dailyroutineapp
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Build Archive
      run: |
        xcodebuild archive \
          -scheme DailyRoutineApp \
          -destination 'generic/platform=iOS' \
          -archivePath DailyRoutineApp.xcarchive \
          -configuration Release \
          DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM }} \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="DailyRoutineApp Distribution"
          
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath DailyRoutineApp.xcarchive \
          -exportPath . \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload to App Store Connect
      if: github.ref == 'refs/heads/main'
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file DailyRoutineApp.ipa \
          --username ${{ secrets.APPSTORE_USERNAME }} \
          --password ${{ secrets.APPSTORE_PASSWORD }} \
          --verbose
          
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          DailyRoutineApp.ipa
          DailyRoutineApp.xcarchive

  performance-test:
    name: Performance Tests
    runs-on: macos-13
    needs: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Run Performance Tests
      run: |
        xcodebuild test \
          -scheme DailyRoutineApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
          -only-testing:DailyRoutineAppTests/MeditationTimerTests/testTimerPrecision \
          -only-testing:DailyRoutineAppTests/RoutineUseCasesTests/testCreateRoutinePerformance \
          -resultBundlePath PerformanceResults \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: PerformanceResults.xcresult

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, ui-test, build]
    if: always()
    
    steps:
    - name: Notify on Success
      if: ${{ needs.test.result == 'success' && needs.ui-test.result == 'success' }}
      run: |
        echo "✅ Build and tests passed successfully!"
        # Add Slack/Teams notification here
        
    - name: Notify on Failure
      if: ${{ needs.test.result == 'failure' || needs.ui-test.result == 'failure' }}
      run: |
        echo "❌ Build or tests failed!"
        # Add failure notification here